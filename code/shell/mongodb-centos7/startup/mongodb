#!/bin/bash
#add for chkconfig
#chkconfig:23456 70 30
#description: mongo-service auto start

# # 变量读取
# var -- MongodbDir
readVar() {
  if [ ! -e /etc/frontend.conf ]; then
    echo ">>> You need to exec init.sh first ... "
    echo ">>> now exit ..."
    exit 0
  fi
  for var in `cat /etc/frontend.conf`; do
    a=`echo $var | awk -F '=' '{print $1}'`
    b=`echo $var | awk -F '=' '{print $2}'`
    export $a=$b
  done
}

# # 变量检查
checkVar() {
  mongodbPath=""
  mongodbLogPath=""
  mongodbLogName=""
  whoami=`whoami`
  mongodbHost=""
  mongodbPort=""
  frontendScriptPath=""

  readVar
}


# # Function

# # 停止pm2进程 ----------------
stop() {
  echo ">>> going to shutdown mongodb ... "
  mongod --shutdown --dbpath $mongodbPath
}

# # 启动mongodb进程 --------------
start() {
  # 01 make dbpath
  mkdir "$mongodbPath" -p
  mkdir "$mongodbLogPath" -p

  echo ">>> now check mongodb $mongodbPort ... "
  grep_port=`netstat -tlpn | grep "\b$mongodbPort\b"`

  if [ -n "$grep_port" ]
  then
    echo ">>> mongodb already started in port:$mongodbPort ..."
  else
    echo ">>> trying to start mongodb service ..."

    mongod -f ./conf/mongod.conf
  fi
}

# # 重启mongodb进程 --------------
restart() {
  stop
  start
}

# # 清理所有数据 --------------
clean() {
  read -p 'are you sure to wipe mongodb data and restart (y/n) ? > ' -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  backup
  stop
  rm "$mongodbPath" -rf
  rm "$mongodbLogPath" -rf
  start

  echo
  echo ">>> mongodb clean done! "
  echo
}

# # 清理远程的备份文件 -------------------
cleanRemoteBackup() {
  ip="$1"

  read -p "are you sure to wipe remote mongodb backup file on $ip (y/n) ? > " -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  if [ -n "$ip" ]; then
    echo ">>> now delete remote backup files ... "
    ssh root@$ip rm -r -f "/root/mongodb/backup" "/root/mongodb/dump"
    backup $ip
    echo ">>> clean remote mongodb backup file and re-backup done ! "
  else
    echo ">>> command [--clean-remote] need param [ip]"
    echo ">>> see usage with [--help | -h]"
    exit 0;
  fi
}

# # 备份mongodb数据 --------------
# mongodump -h 127.0.0.1 -d yapi -o /root/mongodb/dump/
# 备份分为硬备份(拷贝数据库源数据、日志)和dump导出备份(只导出yapi)
backup() {
  echo ">>> now backup mongodb data and logs ... "
  mkdir -p $mongodbBackupPath

  local ip="$1"
  local backupPath="$mongodbBackupPath/backup"
  local dumpPath="$mongodbBackupPath/dump"
  local today=$(date +%Y-%m-%d)
  local lastDbPath=$(echo $mongodbPath | awk -F '/' '{print $NF}')
  local lastLogPath=$(echo $mongodbLogPath | awk -F "/" '{print $NF}')

  mkdir $backupPath -p
  mkdir $dumpPath -p

  # 硬备份数据和日志文件到本地
  echo ">>> packaging logs and data to $backupPath ... "
  rm "$mongodbBackupPath/backup/*" -f
  tar -czf $mongodbBackupPath/backup/${lastDbPath}_$today.gzip -C $mongodbPath/../ $lastDbPath
  tar -czf $mongodbBackupPath/backup/"${lastLogPath}_$today.gzip" -C $mongodbLogPath/../ $lastLogPath

  # dump导出yapi数据库到本地
  echo ">>> dumping logs and data to $dumpPath ... "

  rm "$dumpPath"/* -rf

  mongodump -h $mongodbHost -d 'yapi' -o "$dumpPath"
  mongodump -h $mongodbHost -d 'admin' -o "$dumpPath"
  mongodump -h $mongodbHost -d 'config' -o "$dumpPath"
  mongodump -h $mongodbHost -d 'local' -o "$dumpPath"

  for dp in $(ls $dumpPath); do
    if [ -d "$dumpPath/$dp" ]; then
      tar -czf "$dumpPath/$dp.gzip" -C "$dumpPath" "$dp"
      rm "$dumpPath/$dp" -rf
    fi
  done

  # 所有数据备份到远程机器
  if [ -n "$ip" ]; then
    bash "$frontendScriptPath/rsync" --send "$ip"
  fi

  echo
  echo ">>> mongodb backup done ... "
  echo
}

# # 恢复mongodb数据 --------------
# mongorestore -h 127.0.0.1 -d yapi /root/mongodb/dump/yapi
restore() {
  read -p 'are you sure to restore mongodb data from backup file (y/n) ? > ' -a choise
  if [[ "$choise" != "y" ]]; then
    exit 0
  fi

  local fromDump="no"
  local ip=""

  while [ -n "$1" ]; do
    case "$1" in
       --dump )
        fromDump="yes"
       ;;
       * )
        ip="$1"
       ;;
    esac
    shift
  done

  echo ">>> now restore mongodb data and logs ... "
  # 检查路径
  if [ -z "$mongodbBackupPath" ]; then
    echo ">>> checkout mongodb backup path fail!"
    exit 1
  fi

  # 检查是否从远程拿取备份文件
  if [ -n "$ip" ]; then
    # 从远程拿文件覆盖本地的备份
    rm $mongodbBackupPath/backup/* -f
    rm $mongodbBackupPath/dump/* -f
    bash "$MongodbPath/startup/rsync" --get "$ip"
  fi

  # 选择从dump恢复还是硬恢复
  if [[ $fromDump == "no" ]]; then
    # 检查本地备份文件
    local allBackupFiles=$(ls $mongodbBackupPath/backup)
    local dataFile=''
    local logFile=''
    for backupFile in ${allBackupFiles[@]}; do
      if [ -n "`echo $backupFile | sed '/data/'p -n`" ]; then
        dataFile=$backupFile
      fi
      if [ -n `echo $backupFile | sed '/log/'p -n` ]; then
        logFile=$backupFile
      fi
    done

    # 停止mongodb
    echo ">>> now trying to stop mongodb ... "
    stop

    if [ -f "$allBackupFiles/$dataFile" ]; then
      rm $mongodbPath/data -rf
      tar -xf "$allBackupFiles"/$dataFile -C $mongodbPath
      echo ">>> mongodb data file restore done!"
    fi

    if [ -f "$allBackupFiles/$logFile" ]; then
      rm $mongodbPath/logs -rf
      tar -xf "$allBackupFiles"/$logFile -C $mongodbPath
      echo ">>> mongodb log file restore done!"
    fi

    # 开启mongodb
    echo ">>> now trying to start mongodb ... "
    start

  else

    local baseName=''
    for dp in $(ls $mongodbBackupPath/dump); do
      if [ -f "$mongodbBackupPath/dump/$dp" ]; then
        baseName=$(basename "$dp" .gzip)
        tar -xf $mongodbBackupPath/dump/$dp -C $mongodbBackupPath/dump
        mongorestore -h $mongodbHost -d $baseName $mongodbBackupPath/dump/$baseName
        rm $mongodbBackupPath/dump/$baseName -rf
      fi
    done

  fi

  echo
  echo ">>> mongodb restore done! "
  echo

}

# # 设置定时备份任务每天每五小时备份一次 -----------------
setCronTab() {
  local timeRule="* 0-23/5 * * * "

  local ip=""
  local scheduleFile="$frontendScriptPath/conf/rsync-schedule"

  while [ -n "$1" ]; do
    case "$1" in
      -s )
        timeRule="$2"
        shift
      ;;
      -t )
        ip="$2"
        shift
      ;;
    esac
    shift
  done

  rm "$scheduleFile" -f
  touch "$scheduleFile"

  echo "# # mongodb备份定时任务" >> $scheduleFile
  echo "SHELL=/bin/bash" >> $scheduleFile
  echo "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin" >> $scheduleFile
  echo "" >> $scheduleFile
  echo "# minute   hour   day   month   week   command" >> $scheduleFile
  echo "$timeRule bash $frontendScriptPath/mongodb --backup $ip" >> $scheduleFile

  # 删除旧的crontab任务
  disableCronTab
  crontab -u root $scheduleFile
  echo ">>> enable the mongodb-backup crontab service done!"
}

# # 清除定时备份任务 --------------
disableCronTab() {
  sed -i '/mongodb --backup/d' /var/spool/cron/root
  echo ">>> disable the mongodb-backup crontab service done!"
}

# # 显示帮助信息 ----------------------
showUsage() {
  echo
  echo "main: bash mongodb [--param]"
  echo "|___ param: [--start   | start   ]      => start mongodb.service"
  echo "|___ param: [--stop    | stop    ]      => stop mongodb.service"
  echo "|___ param: [--restart | restart ]      => restart mongodb.service"
  echo "|___ param: [--clean   | clean   ]      => wipe mongodb data and restart"
  echo "|___ param: [--clean-remote | -cr] [ip]          => clean remote [ip]'s mongodb backup file before today(`date +%Y-%m-%d`)"
  echo "|___ param: [--backup  | backup  ] [ip]          => backup mongodb data to local and remote(if you set the param [ip])"
  echo "       |___ example: bash mongodb --backup 10.0.6.231"
  echo "       |___ example: bash mongodb backup 10.0.6.231"
  echo "       |___ example: bash mongodb backup"
  echo
  echo "|___ param: [--restore | restore ] [ip] [--dump] => restore mongodb data from local or remote(if you set the param [ip])"
  echo "       |___ example: bash mongodb --restore --dump 10.0.6.231"
  echo "       |___ example: bash mongodb --restore 10.0.6.231 --dump"
  echo "       |___ example: bash mongodb --restore 10.0.6.231"
  echo "       |___ example: bash mongodb restore 10.0.6.231"
  echo "       |___ example: bash mongodb restore"
  echo
  echo "|___ param: [--crontab           ]      => enable mongodb-backup service crontab service"
  echo "|___ param: [--drontab           ]      => disable mongodb-backup service crontab service"
  echo "|___ param: [--help    | -h      ]      => show help info"
  echo
}

# # Main Action
case $1 in

  --start | start )
    checkVar
    start
  ;;

  --stop | stop )
    checkVar
    stop
  ;;

  --restart | restart )
    checkVar
    restart
  ;;

  --clean | clean )
    checkVar
    clean
  ;;

  --clean-remote | -cr )
    checkVar
    shift
    cleanRemoteBackup $@
  ;;

  --backup | backup)
    checkVar
    backup $2
  ;;

  --restore | restore )
    checkVar
    shift
    restore $@
  ;;

  --help | -h )
    showUsage
  ;;

  --crontab )
    checkVar
    shift
    setCronTab $@
  ;;

  --drontab )
    checkVar
    disableCronTab
  ;;

esac
